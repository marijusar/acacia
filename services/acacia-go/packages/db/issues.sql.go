// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: issues.sql

package db

import (
	"context"
	"database/sql"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO issues (name, description, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING id, name, description, created_at, updated_at
`

type CreateIssueParams struct {
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
}

func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, createIssue, arg.Name, arg.Description)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIssue = `-- name: DeleteIssue :one
DELETE FROM issues
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

func (q *Queries) DeleteIssue(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRowContext(ctx, deleteIssue, id)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllIssues = `-- name: GetAllIssues :many
SELECT id, name, description, created_at, updated_at FROM issues
ORDER BY created_at DESC
`

func (q *Queries) GetAllIssues(ctx context.Context) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, getAllIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssueByID = `-- name: GetIssueByID :one
SELECT id, name, description, created_at, updated_at FROM issues
WHERE id = $1
`

func (q *Queries) GetIssueByID(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRowContext(ctx, getIssueByID, id)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIssue = `-- name: UpdateIssue :one
UPDATE issues
SET name = $2,
    description = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at
`

type UpdateIssueParams struct {
	ID          int64          `db:"id" json:"id"`
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
}

func (q *Queries) UpdateIssue(ctx context.Context, arg UpdateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, updateIssue, arg.ID, arg.Name, arg.Description)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
