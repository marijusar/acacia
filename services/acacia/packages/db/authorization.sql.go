// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: authorization.sql

package db

import (
	"context"
)

const checkUserTeamMembership = `-- name: CheckUserTeamMembership :one
SELECT EXISTS (
    SELECT 1
    FROM team_members
    WHERE team_id = $1 AND user_id = $2
) AS is_member
`

type CheckUserTeamMembershipParams struct {
	TeamID int64 `db:"team_id" json:"team_id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) CheckUserTeamMembership(ctx context.Context, arg CheckUserTeamMembershipParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserTeamMembership, arg.TeamID, arg.UserID)
	var is_member bool
	err := row.Scan(&is_member)
	return is_member, err
}

const getTeamIDByIssue = `-- name: GetTeamIDByIssue :one
SELECT p.team_id
FROM issues i
JOIN project_status_columns psc ON i.column_id = psc.id
JOIN projects p ON psc.project_id = p.id
WHERE i.id = $1
`

func (q *Queries) GetTeamIDByIssue(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamIDByIssue, id)
	var team_id int64
	err := row.Scan(&team_id)
	return team_id, err
}

const getTeamIDByProject = `-- name: GetTeamIDByProject :one
SELECT team_id
FROM projects
WHERE id = $1
`

func (q *Queries) GetTeamIDByProject(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamIDByProject, id)
	var team_id int64
	err := row.Scan(&team_id)
	return team_id, err
}

const getTeamIDByProjectStatusColumn = `-- name: GetTeamIDByProjectStatusColumn :one
SELECT p.team_id
FROM project_status_columns psc
JOIN projects p ON psc.project_id = p.id
WHERE psc.id = $1
`

func (q *Queries) GetTeamIDByProjectStatusColumn(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamIDByProjectStatusColumn, id)
	var team_id int64
	err := row.Scan(&team_id)
	return team_id, err
}
