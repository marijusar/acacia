// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package db

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, team_id, created_at, updated_at)
    VALUES ($1, $2, NOW(), NOW())
RETURNING
    id, name, created_at, updated_at, team_id
`

type CreateProjectParams struct {
	Name   string `db:"name" json:"name"`
	TeamID int64  `db:"team_id" json:"team_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.TeamID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE id = $1
RETURNING
    id, name, created_at, updated_at, team_id
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, deleteProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT
    id, name, created_at, updated_at, team_id
FROM
    projects
WHERE
    id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const getProjectIssues = `-- name: GetProjectIssues :many
SELECT
    issues.id, issues.name, issues.description, issues.created_at, issues.updated_at, issues.column_id
FROM
    project_status_columns
    JOIN issues ON project_status_columns.id = issues.column_id
WHERE
    project_id = $1
`

func (q *Queries) GetProjectIssues(ctx context.Context, projectID int32) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, getProjectIssues, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ColumnID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjects = `-- name: GetProjects :many
SELECT
    p.id, p.name, p.created_at, p.updated_at, p.team_id
FROM
    projects p
    JOIN team_members tm ON p.team_id = tm.team_id
WHERE
    tm.user_id = $1
`

func (q *Queries) GetProjects(ctx context.Context, userID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE
    projects
SET
    name = $2,
    updated_at = NOW()
WHERE
    id = $1
RETURNING
    id, name, created_at, updated_at, team_id
`

type UpdateProjectParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.ID, arg.Name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}
