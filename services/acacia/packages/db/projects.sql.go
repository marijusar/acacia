// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: projects.sql

package db

import (
	"context"
	"time"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, created_at, updated_at)
VALUES ($1, NOW(), NOW())
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :one
DELETE FROM projects
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, deleteProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, name, created_at, updated_at FROM projects
WHERE id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectDetailsByProjectID = `-- name: GetProjectDetailsByProjectID :one
SELECT projects.id, projects.name, projects.created_at, projects.updated_at, project_status_columns.id, project_id, project_status_columns.name, position_index, project_status_columns.created_at, project_status_columns.updated_at FROM projects
JOIN project_status_columns on project_status_columns.project_id = projects.id 
WHERE projects.id = $1
`

type GetProjectDetailsByProjectIDRow struct {
	ID            int64     `db:"id" json:"id"`
	Name          string    `db:"name" json:"name"`
	CreatedAt     time.Time `db:"created_at" json:"created_at"`
	UpdatedAt     time.Time `db:"updated_at" json:"updated_at"`
	ID_2          int64     `db:"id_2" json:"id_2"`
	ProjectID     int32     `db:"project_id" json:"project_id"`
	Name_2        string    `db:"name_2" json:"name_2"`
	PositionIndex int16     `db:"position_index" json:"position_index"`
	CreatedAt_2   time.Time `db:"created_at_2" json:"created_at_2"`
	UpdatedAt_2   time.Time `db:"updated_at_2" json:"updated_at_2"`
}

func (q *Queries) GetProjectDetailsByProjectID(ctx context.Context, id int64) (GetProjectDetailsByProjectIDRow, error) {
	row := q.db.QueryRowContext(ctx, getProjectDetailsByProjectID, id)
	var i GetProjectDetailsByProjectIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.ProjectID,
		&i.Name_2,
		&i.PositionIndex,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateProjectParams struct {
	ID   int64  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.ID, arg.Name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
