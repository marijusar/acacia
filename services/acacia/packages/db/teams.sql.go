// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: teams.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const addTeamMember = `-- name: AddTeamMember :one
INSERT INTO team_members (team_id, user_id, joined_at)
    VALUES ($1, $2, NOW())
RETURNING id, team_id, user_id, joined_at
`

type AddTeamMemberParams struct {
	TeamID int64 `db:"team_id" json:"team_id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, addTeamMember, arg.TeamID, arg.UserID)
	var i TeamMember
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.JoinedAt,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (name, description, created_at, updated_at)
    VALUES ($1, $2, NOW(), NOW())
RETURNING id, name, description, created_at, updated_at
`

type CreateTeamParams struct {
	Name        string      `db:"name" json:"name"`
	Description null.String `db:"description" json:"description"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Description)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, description, created_at, updated_at FROM teams WHERE id = $1
`

func (q *Queries) GetTeamByID(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT u.id, u.email, u.name, u.password_hash, u.created_at, u.updated_at FROM users u
JOIN team_members tm ON u.id = tm.user_id
WHERE tm.team_id = $1
`

func (q *Queries) GetTeamMembers(ctx context.Context, teamID int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeams = `-- name: GetUserTeams :many
SELECT t.id, t.name, t.description, t.created_at, t.updated_at FROM teams t
JOIN team_members tm ON t.id = tm.team_id
WHERE tm.user_id = $1
`

func (q *Queries) GetUserTeams(ctx context.Context, userID int64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeams, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM team_members WHERE team_id = $1 AND user_id = $2
`

type RemoveTeamMemberParams struct {
	TeamID int64 `db:"team_id" json:"team_id"`
	UserID int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, arg.TeamID, arg.UserID)
	return err
}
