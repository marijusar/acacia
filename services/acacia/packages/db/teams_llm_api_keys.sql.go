// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: teams_llm_api_keys.sql

package db

import (
	"context"
)

const checkTeamLLMAPIKeyExists = `-- name: CheckTeamLLMAPIKeyExists :one
SELECT EXISTS(
    SELECT 1 FROM teams_llm_api_keys tlak
    JOIN projects p ON p.team_id = tlak.team_id
    WHERE p.id = $1 AND tlak.provider = $2 AND tlak.is_active = true
) AS exists
`

type CheckTeamLLMAPIKeyExistsParams struct {
	ID       int64  `db:"id" json:"id"`
	Provider string `db:"provider" json:"provider"`
}

func (q *Queries) CheckTeamLLMAPIKeyExists(ctx context.Context, arg CheckTeamLLMAPIKeyExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTeamLLMAPIKeyExists, arg.ID, arg.Provider)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createTeamLLMAPIKey = `-- name: CreateTeamLLMAPIKey :one
INSERT INTO teams_llm_api_keys (team_id, provider, encrypted_key)
VALUES ($1, $2, $3)
RETURNING id, team_id, provider, encrypted_key, is_active, created_at, updated_at, last_used_at
`

type CreateTeamLLMAPIKeyParams struct {
	TeamID       int64  `db:"team_id" json:"team_id"`
	Provider     string `db:"provider" json:"provider"`
	EncryptedKey string `db:"encrypted_key" json:"encrypted_key"`
}

func (q *Queries) CreateTeamLLMAPIKey(ctx context.Context, arg CreateTeamLLMAPIKeyParams) (TeamsLlmApiKey, error) {
	row := q.db.QueryRowContext(ctx, createTeamLLMAPIKey, arg.TeamID, arg.Provider, arg.EncryptedKey)
	var i TeamsLlmApiKey
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Provider,
		&i.EncryptedKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteTeamLLMAPIKey = `-- name: DeleteTeamLLMAPIKey :exec
DELETE FROM teams_llm_api_keys
WHERE id = $1
`

func (q *Queries) DeleteTeamLLMAPIKey(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamLLMAPIKey, id)
	return err
}

const getAllTeamLLMAPIKeys = `-- name: GetAllTeamLLMAPIKeys :many
SELECT id, team_id, provider, encrypted_key, is_active, created_at, updated_at, last_used_at FROM teams_llm_api_keys
WHERE team_id = $1 AND is_active = true
ORDER BY created_at DESC
`

func (q *Queries) GetAllTeamLLMAPIKeys(ctx context.Context, teamID int64) ([]TeamsLlmApiKey, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeamLLMAPIKeys, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamsLlmApiKey
	for rows.Next() {
		var i TeamsLlmApiKey
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.Provider,
			&i.EncryptedKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamLLMAPIKeyByProjectID = `-- name: GetTeamLLMAPIKeyByProjectID :one
SELECT tlak.id, tlak.team_id, tlak.provider, tlak.encrypted_key, tlak.is_active, tlak.created_at, tlak.updated_at, tlak.last_used_at FROM teams_llm_api_keys tlak
JOIN projects p ON p.team_id = tlak.team_id
WHERE p.id = $1 AND tlak.provider = $2 AND tlak.is_active = true
LIMIT 1
`

type GetTeamLLMAPIKeyByProjectIDParams struct {
	ID       int64  `db:"id" json:"id"`
	Provider string `db:"provider" json:"provider"`
}

func (q *Queries) GetTeamLLMAPIKeyByProjectID(ctx context.Context, arg GetTeamLLMAPIKeyByProjectIDParams) (TeamsLlmApiKey, error) {
	row := q.db.QueryRowContext(ctx, getTeamLLMAPIKeyByProjectID, arg.ID, arg.Provider)
	var i TeamsLlmApiKey
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Provider,
		&i.EncryptedKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const getTeamLLMAPIKeyByTeamID = `-- name: GetTeamLLMAPIKeyByTeamID :one
SELECT id, team_id, provider, encrypted_key, is_active, created_at, updated_at, last_used_at FROM teams_llm_api_keys
WHERE team_id = $1 AND provider = $2 AND is_active = true
LIMIT 1
`

type GetTeamLLMAPIKeyByTeamIDParams struct {
	TeamID   int64  `db:"team_id" json:"team_id"`
	Provider string `db:"provider" json:"provider"`
}

func (q *Queries) GetTeamLLMAPIKeyByTeamID(ctx context.Context, arg GetTeamLLMAPIKeyByTeamIDParams) (TeamsLlmApiKey, error) {
	row := q.db.QueryRowContext(ctx, getTeamLLMAPIKeyByTeamID, arg.TeamID, arg.Provider)
	var i TeamsLlmApiKey
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Provider,
		&i.EncryptedKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const updateLastUsedAt = `-- name: UpdateLastUsedAt :exec
UPDATE teams_llm_api_keys
SET last_used_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastUsedAt(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateLastUsedAt, id)
	return err
}

const updateTeamLLMAPIKey = `-- name: UpdateTeamLLMAPIKey :one
UPDATE teams_llm_api_keys
SET encrypted_key = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, team_id, provider, encrypted_key, is_active, created_at, updated_at, last_used_at
`

type UpdateTeamLLMAPIKeyParams struct {
	ID           int64  `db:"id" json:"id"`
	EncryptedKey string `db:"encrypted_key" json:"encrypted_key"`
}

func (q *Queries) UpdateTeamLLMAPIKey(ctx context.Context, arg UpdateTeamLLMAPIKeyParams) (TeamsLlmApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateTeamLLMAPIKey, arg.ID, arg.EncryptedKey)
	var i TeamsLlmApiKey
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.Provider,
		&i.EncryptedKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsedAt,
	)
	return i, err
}
