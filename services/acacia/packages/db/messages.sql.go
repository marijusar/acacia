// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: messages.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    conversation_id,
    role,
    content,
    sequence_number
) VALUES (
    $1, $2, $3,
    (SELECT COALESCE(MAX(sequence_number), 0) + 1 FROM messages WHERE conversation_id = $1)
) RETURNING id, conversation_id, role, content, sequence_number, created_at
`

type CreateMessageParams struct {
	ConversationID int64  `db:"conversation_id" json:"conversation_id"`
	Role           string `db:"role" json:"role"`
	Content        string `db:"content" json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ConversationID, arg.Role, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Role,
		&i.Content,
		&i.SequenceNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessageByID = `-- name: DeleteMessageByID :exec
DELETE FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMessageByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessageByID, id)
	return err
}

const deleteMessagesByConversationID = `-- name: DeleteMessagesByConversationID :exec
DELETE FROM messages
WHERE conversation_id = $1
`

func (q *Queries) DeleteMessagesByConversationID(ctx context.Context, conversationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessagesByConversationID, conversationID)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, conversation_id, role, content, sequence_number, created_at FROM messages
WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Role,
		&i.Content,
		&i.SequenceNumber,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByConversationID = `-- name: GetMessagesByConversationID :many
SELECT id, conversation_id, role, content, sequence_number, created_at FROM messages
WHERE conversation_id = $1
ORDER BY sequence_number ASC
`

func (q *Queries) GetMessagesByConversationID(ctx context.Context, conversationID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.Role,
			&i.Content,
			&i.SequenceNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
