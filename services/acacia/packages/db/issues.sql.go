// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: issues.sql

package db

import (
	"context"

	"github.com/guregu/null"
)

const createIssue = `-- name: CreateIssue :one
INSERT INTO issues (name, column_id, description, created_at, updated_at)
    VALUES ($1, $2, $3, NOW(), NOW())
RETURNING
    id, name, description, created_at, updated_at, column_id
`

type CreateIssueParams struct {
	Name        string      `db:"name" json:"name"`
	ColumnID    int64       `db:"column_id" json:"column_id"`
	Description null.String `db:"description" json:"description"`
}

func (q *Queries) CreateIssue(ctx context.Context, arg CreateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, createIssue, arg.Name, arg.ColumnID, arg.Description)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ColumnID,
	)
	return i, err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM issues
WHERE id = $1
`

func (q *Queries) DeleteIssue(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIssue, id)
	return err
}

const getIssueByID = `-- name: GetIssueByID :one
SELECT
    id, name, description, created_at, updated_at, column_id
FROM
    issues
WHERE
    id = $1
`

func (q *Queries) GetIssueByID(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRowContext(ctx, getIssueByID, id)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ColumnID,
	)
	return i, err
}

const getIssuesByColumnId = `-- name: GetIssuesByColumnId :many
SELECT
    id, name, description, created_at, updated_at, column_id
FROM
    issues
WHERE
    column_id = $1
ORDER BY
    created_at DESC
`

func (q *Queries) GetIssuesByColumnId(ctx context.Context, columnID int64) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, getIssuesByColumnId, columnID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ColumnID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reassignIssuesFromColumn = `-- name: ReassignIssuesFromColumn :exec
UPDATE
    issues
SET
    column_id = $1
WHERE
    column_id = $2
`

type ReassignIssuesFromColumnParams struct {
	TargetColumn int64 `db:"target_column" json:"target_column"`
	SourceColumn int64 `db:"source_column" json:"source_column"`
}

func (q *Queries) ReassignIssuesFromColumn(ctx context.Context, arg ReassignIssuesFromColumnParams) error {
	_, err := q.db.ExecContext(ctx, reassignIssuesFromColumn, arg.TargetColumn, arg.SourceColumn)
	return err
}

const updateIssue = `-- name: UpdateIssue :one
UPDATE
    issues
SET
    name = $2,
    description = $3,
    updated_at = NOW()
WHERE
    id = $1
RETURNING
    id, name, description, created_at, updated_at, column_id
`

type UpdateIssueParams struct {
	ID          int64       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description null.String `db:"description" json:"description"`
}

func (q *Queries) UpdateIssue(ctx context.Context, arg UpdateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, updateIssue, arg.ID, arg.Name, arg.Description)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ColumnID,
	)
	return i, err
}
