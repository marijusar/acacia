// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package db

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (user_id, jti, expires_at, created_at)
    VALUES ($1, $2, $3, NOW())
RETURNING
    id, user_id, jti, expires_at, created_at, revoked_at
`

type CreateRefreshTokenParams struct {
	UserID    int64     `db:"user_id" json:"user_id"`
	Jti       string    `db:"jti" json:"jti"`
	ExpiresAt time.Time `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.Jti, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Jti,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const getRefreshTokenByUserAndJTI = `-- name: GetRefreshTokenByUserAndJTI :one
SELECT
    id, user_id, jti, expires_at, created_at, revoked_at
FROM
    refresh_tokens
WHERE
    user_id = $1
    AND jti = $2
    AND expires_at > NOW()
    AND revoked_at IS NULL
`

type GetRefreshTokenByUserAndJTIParams struct {
	UserID int64  `db:"user_id" json:"user_id"`
	Jti    string `db:"jti" json:"jti"`
}

func (q *Queries) GetRefreshTokenByUserAndJTI(ctx context.Context, arg GetRefreshTokenByUserAndJTIParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserAndJTI, arg.UserID, arg.Jti)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Jti,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeAllUserRefreshTokens = `-- name: RevokeAllUserRefreshTokens :exec
UPDATE
    refresh_tokens
SET
    revoked_at = NOW()
WHERE
    user_id = $1
    AND revoked_at IS NULL
`

func (q *Queries) RevokeAllUserRefreshTokens(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, revokeAllUserRefreshTokens, userID)
	return err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE
    refresh_tokens
SET
    revoked_at = NOW()
WHERE
    user_id = $1
    AND jti = $2
`

type RevokeRefreshTokenParams struct {
	UserID int64  `db:"user_id" json:"user_id"`
	Jti    string `db:"jti" json:"jti"`
}

func (q *Queries) RevokeRefreshToken(ctx context.Context, arg RevokeRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, arg.UserID, arg.Jti)
	return err
}
