// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: conversations.sql

package db

import (
	"context"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (user_id, team_id, title, provider, model)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, title, provider, model, created_at, updated_at, team_id
`

type CreateConversationParams struct {
	UserID   int64  `db:"user_id" json:"user_id"`
	TeamID   int64  `db:"team_id" json:"team_id"`
	Title    string `db:"title" json:"title"`
	Provider string `db:"provider" json:"provider"`
	Model    string `db:"model" json:"model"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation,
		arg.UserID,
		arg.TeamID,
		arg.Title,
		arg.Provider,
		arg.Model,
	)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Provider,
		&i.Model,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations
WHERE id = $1
`

func (q *Queries) DeleteConversation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const getConversationByID = `-- name: GetConversationByID :one
SELECT
    id, user_id, title, provider, model, created_at, updated_at, team_id
FROM
    conversations
WHERE
    id = $1
`

func (q *Queries) GetConversationByID(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Provider,
		&i.Model,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const getConversationsByUser = `-- name: GetConversationsByUser :many
SELECT
    id, user_id, title, provider, model, created_at, updated_at, team_id
FROM
    conversations
WHERE
    user_id = $1
ORDER BY
    created_at DESC
`

func (q *Queries) GetConversationsByUser(ctx context.Context, userID int64) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, getConversationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Provider,
			&i.Model,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestConversationByUser = `-- name: GetLatestConversationByUser :one
SELECT
    id, user_id, title, provider, model, created_at, updated_at, team_id
FROM
    conversations
WHERE
    user_id = $1
ORDER BY
    created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestConversationByUser(ctx context.Context, userID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getLatestConversationByUser, userID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Provider,
		&i.Model,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const updateConversationTitle = `-- name: UpdateConversationTitle :one
UPDATE
    conversations
SET
    title = $2,
    updated_at = NOW()
WHERE
    id = $1
RETURNING
    id, user_id, title, provider, model, created_at, updated_at, team_id
`

type UpdateConversationTitleParams struct {
	ID    int64  `db:"id" json:"id"`
	Title string `db:"title" json:"title"`
}

func (q *Queries) UpdateConversationTitle(ctx context.Context, arg UpdateConversationTitleParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, updateConversationTitle, arg.ID, arg.Title)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Provider,
		&i.Model,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}
