services:
  traefik:
    image: traefik:v3.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entrypoint=metrics"
      - "--entrypoints.metrics.address=:8082"
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082"  # Prometheus metrics
      - "8081:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
    networks:
      - dashboard-network
    restart: unless-stopped

  acacia:
    build:
      context: .
      dockerfile: docker/acacia.Dockerfile
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    ports:
      - '8080:8080'
    volumes:
      - ./services/acacia:/app
      - go_mod_cache:/go/pkg/mod
    env_file : "./services/acacia/.env"
    restart: unless-stopped
    networks:
      - dashboard-network
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: restart
          path: ./services/acacia
          target: /app
          ignore:
            - bin/
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    expose:
      - '3000'
    volumes:
      - ./services/frontend:/app
      - /app/node_modules  # Use container's node_modules, not host's
    env_file : "./services/frontend/.env"
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - dashboard-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=acacia_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dashboard-network

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dashboard-network

volumes:
  postgres_data:
  redis_data:
  go_mod_cache:

networks:
  dashboard-network:
    driver: bridge
